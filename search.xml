<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[多重委托(MultiDelegate)官方解释]]></title>
      <url>http://yoursite.com/2016/05/18/%E5%A4%9A%E9%87%8D%E5%A7%94%E6%89%98-MultiDelegate-%E5%AE%98%E6%96%B9%E8%A7%A3%E9%87%8A/</url>
      <content type="html"><![CDATA[<h1 id="多重委托"><a href="#多重委托" class="headerlink" title="多重委托"></a>多重委托</h1><hr>
<ul>
<li>什么是多重委托</li>
<li>使用的原因</li>
<li>为什么不使用普通的委托与通知</li>
</ul>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><hr>
<p>苹果有两种常用的回调方式：</p>
<ul>
<li>委托</li>
<li>通知<br>委托非常简单和直接，用户注册自己为一个委托，然后实现它需要去实现的方法。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[worker setDelegate:self];</span><br><span class="line"></span><br><span class="line">-(void)wokerDidFinish:(Worker *)sender</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)woker:(Worker *)sender didFinishSubTask:(id)subtask inDuration:(NsTimeInterval)elapsed</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(BOOL)worker:(Worker *)sender shouldPerformSubTask:(id)subtask</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通知同样简单，但是需要多了几步，用户需要分别注册它们感兴趣的每个通知：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self</span><br><span class="line">selector:@selector(workerDidFinish:)</span><br><span class="line">name:WorkerDidFinishNotification</span><br><span class="line">object:nil];</span><br><span class="line"></span><br><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self</span><br><span class="line">selector:@selector(workerDidFinishSubTask:)</span><br><span class="line">name:WorkerDidFinishSubTaskNotification</span><br><span class="line">object:nil];</span><br><span class="line"></span><br><span class="line">- (void)workerDidFinish:(NSNotification *)notification</span><br><span class="line">&#123;</span><br><span class="line">Worker *sender = [notification object];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)workerDidFinishSubTask:(NSNotification *)notification</span><br><span class="line">&#123;</span><br><span class="line">Worker *sender = [notification object];</span><br><span class="line">id subtask = [[notification userInfo] objectForKey:@&quot;subtask&quot;];</span><br><span class="line">NSTimeInterval elapsed = [[[notification userInfo] objectForKey&quot;duration&quot;] doubleValue];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中我们要将参数从通知字典中取出，也就是说用户需要知道正确的键值才能取出对应的参数。<br>另外第三方委托方法不能通过通知来实现，因为<strong>通知不允许返回变量</strong>。<br>Delegate的缺点：</p>
<ul>
<li>只能有一个委托<br>notification的缺点：</li>
<li>注册多个回调时比较麻烦</li>
<li>从字典中取出参数非常麻烦</li>
<li>当需要返回值时无法使用<h2 id="XMPP框架需要哪些东西？"><a href="#XMPP框架需要哪些东西？" class="headerlink" title="XMPP框架需要哪些东西？"></a>XMPP框架需要哪些东西？</h2></li>
</ul>
<hr>
<ol>
<li>xmpp框架必须能够把事件广播给多个接收者。<br>以消息为例，可能存在多个接收端：聊天窗口，历史日志以及消息推送系统。</li>
<li>xmpp框架必须易于扩展。<br>它必须能够支持大量的EXP’s以及任何想进行二次开发的xmpp协议的开发者，我们选择的解决方案必须在传播端和接收端都易于使用。</li>
<li>必须支持返回值。<br>一个不错的例子是XMPP RFC的IQ处理授权。如果一个客户端接收到一个类型为’get’或’set’的IQ，但是不知道该怎么处理时，它必须返回一个类型为’error’的IQ，这在多插件时非常有用。</li>
<li>必须有效维持线程安全。<br>xmpp框架存在大量并行，Socket接口、xml解析、xmpp、模块、磁盘接口以及委托都能够运行在他们自己的GCD队列中，这在多核设备中意味着许多任务同时运行在不同的线程中，系统不应该通过跳出循环来维持线程安全。</li>
</ol>
<p>从这些看来委托和通知都不能很好的满足我们的要求，所以我们设计了<code>GCDMulticastDelegate</code>类。</p>
<h2 id="如何运作"><a href="#如何运作" class="headerlink" title="如何运作"></a>如何运作</h2><hr>
<p>它非常简单，作为客户端，你只要这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//Add myself as a delegate, and tell xmppStream to invoke my delegate methods on the main thread</span><br><span class="line">[xmppStream addDelegate:self delegateQueue:dispatch_get_main_queue()];</span><br><span class="line">//</span><br><span class="line">//Then just implement whatever delegate methods you need like normal</span><br><span class="line">-(void)smppStream:(XMPPStream *)sender didReciveMessage:(XMPPMessage *)message</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>就是这些，你可以看到，它和普通的委托非常相似，但是允许你指定特定线程。<br>如果之后你决定把你的操作移出主线程的话，同样非常简单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//Handle most stuff on the main thread</span><br><span class="line">[xmppStream addDelegate:self delegateQueue:dispatch_get_main_queue()];</span><br><span class="line">//But do that one slow thing on a background queue so it doesn&apos;t slow down the UI anymore</span><br><span class="line">[xmppSream addDelegate:bgProcessor delegateQueue:bgProcessorQueue];</span><br></pre></td></tr></table></figure>
<p>在IPhone这样的设备环境下，这样做可以很好的维持你应用的性能。</p>
<h2 id="如何在自己的插件中使用"><a href="#如何在自己的插件中使用" class="headerlink" title="如何在自己的插件中使用"></a>如何在自己的插件中使用</h2><hr>
<p>为了使用多重委托，作为广播端，你需要申明并初始化它：<br>GCDMulticastDelegate <myplugindelegate> <em>multicastDelegate;<br>multicastDelegate = (GCDMulticastDelegate <myplugindelegate> </myplugindelegate></em>)[[GCDMulticastDelegate alloc] init];<br>然后添加能够允许其他对象从委托列表中添加/删除委托的方法：</myplugindelegate></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-(void)addDelegate:(id)delegate delegateQueue:(dispatch_queue_t)delegateQueue</span><br><span class="line">&#123;</span><br><span class="line">[multicastDelegate addDelegate:delegate delegateQueue:delegateQueue];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)removeDelegate:(id)delegate delegateQueue:(dispatch_queue_t)delegateQueue</span><br><span class="line">&#123;</span><br><span class="line">[multicastDelegate removeDelegate:delelgate delegateQueue:delegateQueue];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当你要触发某个委托方法时，只要是注册了的委托，你可以：<br>[multicastDelegate worker:self didFinishSubTask:subtask inDyration:elapsed];</p>
<h2 id="关于返回变量"><a href="#关于返回变量" class="headerlink" title="关于返回变量"></a>关于返回变量</h2><hr>
<p>对于下面的这个委托方法：<br>-(BOOL)worker:(Worker *)sender shouldPerformSubTask:(id)subtask;</p>
<p>假如返回了三个委托，两个返回YES另一个返回NO，那如何处理它？<br>一般来说，如果任何一个委托返回NO，那我们就不能执行这个任务。<br>那么如何实现它？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">// Delegate rules:</span><br><span class="line">// </span><br><span class="line">// If ANY of the delegates return NO, then the result is NO.</span><br><span class="line">// Otherwise the result is YES.</span><br><span class="line"></span><br><span class="line">SEL selector = @selector(worker:shouldPerformSubTask:);</span><br><span class="line"></span><br><span class="line">NSUInteger delegateCount = [multicastDelegate countForSelector:selector];</span><br><span class="line">if (delegateCount == 0)</span><br><span class="line">&#123;</span><br><span class="line">// No delegates implement the selector - default is YES</span><br><span class="line">[self continuePerformSubTask:YES];</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">// Query the delegate(s)</span><br><span class="line">GCDMulticastDelegateEnumerator *delegateEnumerator = [multicastDelegate delegateEnumerator];</span><br><span class="line"></span><br><span class="line">dispatch_semaphore_t delSemaphore = dispatch_semaphore_create(0);</span><br><span class="line">dispatch_group_t delGroup = dispatch_group_create();</span><br><span class="line"></span><br><span class="line">id del;</span><br><span class="line">dispatch_queue_t dq;</span><br><span class="line"></span><br><span class="line">while ([delegateEnumerator getNextDelegate:&amp;del delegateQueue:&amp;dq forSelector:selector])</span><br><span class="line">&#123;</span><br><span class="line">dispatch_group_async(delGroup, dq, ^&#123; @autoreleasepool &#123;</span><br><span class="line"></span><br><span class="line">if (![del worker:self shouldPerformSubTask:subtask])</span><br><span class="line">&#123;</span><br><span class="line">dispatch_semaphore_signal(delSemaphore);</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_queue_t concurrentQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line">dispatch_async(concurrentQueue, ^&#123; @autoreleasepool &#123;</span><br><span class="line"></span><br><span class="line">// Wait for the delegates to finish</span><br><span class="line">dispatch_group_wait(delGroup, DISPATCH_TIME_FOREVER);</span><br><span class="line"></span><br><span class="line">// What was the delegate response?</span><br><span class="line">BOOL shouldPerformSubTask = (dispatch_semaphore_wait(delSemaphore, DISPATCH_TIME_NOW) != 0);</span><br><span class="line"></span><br><span class="line">dispatch_async(ourQueue, ^&#123; @autoreleasepool &#123;</span><br><span class="line">[self continuePerformSubTask:shouldPerformSubTask];</span><br><span class="line">&#125;&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_release(delSemaphore);</span><br><span class="line">dispatch_release(delGroup);</span><br><span class="line">&#125;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/05/18/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
