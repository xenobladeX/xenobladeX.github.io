<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[XMPPFramework源码分析<二> - JID]]></title>
      <url>http://yoursite.com/2016/05/19/XMPPFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%BA%8C-JID/</url>
      <content type="html"><![CDATA[<p>XMPP的地址叫做JabberID（简写为JID），用来标示XMPP网络中的各个XMPP实体。JID有三个属性：domain，node identifier和resource，其中domain是必不可少的部分。（注意：domain和user部分是不分大小写的，但是resource区分大小写。）</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ol>
<li><p>user</p>
<p> 通常表示一个向服务器或网关请求和使用网络服务的实体(比如一个客户端),当然它也能够表示其他的实体(比如在多用户聊天系统中的一个房间)。</p>
</li>
<li><p>domain</p>
<p> 通常指网络中的网关或者服务器。</p>
</li>
<li><p>resource</p>
<p> 通常表示一个特定的会话（与某个设备），连接（与某个地址），或者一个附属于某个节点ID实体相关实体的对象（比如多用户聊天室中的一个参加者）。</p>
</li>
</ol>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li><p><code>+ (XMPPJID *)jidWithString:(NSString *)jidStr</code></p>
<p>  根据JID的组成规则，从JID字符串中生成JID模型。</p>
<ol>
<li><p><code>+ (BOOL)parse:(NSString *)jidStr outUser:(NSString **)user outDomain:(NSString **)domain outResource:(NSString **)resource</code></p>
<p> 从字符串中分割出user、domain与resource。</p>
<blockquote>
<p>JID字符串的规则为[node”@”]domain[“/“resource]，所以查找”@”与”/“的<code>NSRange</code></p>
<blockquote>
<p>获得user、domain、resource，小写转换</p>
<blockquote>
<p>判断domain不包含”@””，resource不再包含”/“</p>
</blockquote>
</blockquote>
</blockquote>
</li>
<li><p>copy</p>
</li>
</ol>
</li>
</ul>
<ul>
<li><p><code>- (BOOL)isEqualToJID:(XMPPJID *)aJID options:(XMPPJIDCompareOptions)mask</code></p>
<p>  该方法判断两个JID是否相同，mask限定比较的范围。比常用的<code>isEqual:</code>方法要快（<code>isEqual:</code>是NSObject的方法，比较的是hash返回的值）。</p>
<p>  三个属性分别进行字符串内容比较<code>isEqualToString :</code></p>
<blockquote>
<p>题外话：XMPPJID实现了<code>- (NSUInteger)hash</code>，利用MurmurHash2库，将3个属性字符串的hash值合并。所以JID可以直接进行<code>isEqual:</code>比较。</p>
</blockquote>
</li>
</ul>
<p>​</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《<a href="http://blog.csdn.net/wbw1985/article/details/5502272" target="_blank" rel="external">XMPP协议的原理介绍</a>》</p>
<p>《<a href="http://www.cnphp6.com/archives/25578" target="_blank" rel="external">XMPP JID 和通信原语有3种：MESSAGE、PRESENCE和IQ</a>》</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[XMPPFramework源码分析<一> - 消息]]></title>
      <url>http://yoursite.com/2016/05/19/XMPPFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%80-%E6%B6%88%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>XMPPFramework所有的消息都是以xml的形式通过XMPPStream传递，数据的解析和包装都是基于xml文件操作，这里消息又被细分为了Message、Presence、IQ。</p>
<h2 id="XMPPElement"><a href="#XMPPElement" class="headerlink" title="XMPPElement"></a>XMPPElement</h2><p>XMPPElement是XMPP三大消息类型Message、Presence、IQ的基类，继承自NSXMLElement，值得注意的是在ios平台上采用更加高效的KissXML来代替NSXMLElement进行xml的解析。</p>
<h3 id="协议实现："><a href="#协议实现：" class="headerlink" title="协议实现："></a>协议实现：</h3><ol>
<li><p><code>- (id)initWithCoder:(NSCoder *)coder</code></p>
<p> NSCoding协议</p>
<blockquote>
<p>用<code>[coder decodeObjectForKey:@&quot;xmlString&quot;]</code>解码成xml字符串</p>
<blockquote>
<p>用XMPPElement的<code>initWithXMLString:</code>转换成XMPPElement类型</p>
<blockquote>
<p><code>object_setClass</code>将XMPPElement类型转换为XMPPElement类型</p>
</blockquote>
</blockquote>
</blockquote>
</li>
<li><p><code>- (void)encodeWithCoder:(NSCoder *)coder</code></p>
<p> NSCoding协议</p>
<blockquote>
<p>调用<code>compactXMLString</code>将XMPPElement转化为压缩型xml字符串</p>
<blockquote>
<p>调用NSXMLElement的<code>encodeObject</code>对xml字符串进行编码</p>
</blockquote>
</blockquote>
</li>
<li><p><code>- (id)copyWithZone:(NSZone *)zone</code></p>
<p> NSCopy协议，由于XMPPElement继承自NSXMLElement，所以获得NSXMLElement类型的copy后，用<code>object_setClass</code>运行时将此备份转换为XMPPElement类型。</p>
</li>
</ol>
<h3 id="公开接口："><a href="#公开接口：" class="headerlink" title="公开接口："></a>公开接口：</h3><ol>
<li>Jabber通信中常用的<strong>属性方法</strong>，包括elementID、to、from、guid、toStr、fromStr、guidStr、timeStr，通过XML解析相应元素的方式来提供。<ul>
<li>elementID：元素id</li>
<li>to：解析后的收件人JID模型（从toStr生成）</li>
<li>from：解析后的发件人JID模型（从fromStr生成）</li>
<li>guid：全局唯一标志符</li>
<li>toStr：发件人JID字符串</li>
<li>fromStr：收件人JID字符串</li>
<li>guidStr：guid字符串</li>
<li>timeStr：发送时间字符串</li>
</ul>
</li>
<li>判断to或from是否相同的方法</li>
</ol>
<h2 id="XMPPMessage"><a href="#XMPPMessage" class="headerlink" title="XMPPMessage"></a>XMPPMessage</h2><p>message是一种基于<strong>推送消息</strong>方法，以<message>作为元素，它不要求响应。主要用于IM、groupChat、alert和notification之类的应用中。</message></p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ol>
<li><p><code>+ (XMPPMessage *)messageFromElement:(NSXMLElement *)element</code></p>
<p> 将NSXMLElement对象替换成XMPPMessage实例</p>
<p> 依然使用<code>object_setClass</code></p>
</li>
<li><p><code>- (id)initWithType:(NSString *)type to:(XMPPJID *)jid elementID:(NSString *)eid child:(NSXMLElement *)childElement</code></p>
<blockquote>
<p>以”message”初始化XML元素</p>
<blockquote>
<p>添加type、to、id属性</p>
<blockquote>
<p>插入子元素</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ol>
<li><p>属性：type</p>
<ul>
<li>normal：类似于email，主要特点是不要求响应；</li>
<li>chat：类似于qq里的好友即时聊天，主要特点是实时通讯；</li>
<li>groupchat：类似于聊天室里的群聊；</li>
<li>headline：用于发送alert和notification；</li>
<li>error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；</li>
</ul>
</li>
<li><p>内容</p>
<p> body、subject、bodyForlanguage、thread</p>
</li>
<li><p>添加子元素</p>
<ul>
<li><code>- (void)addSubject:(NSString *)subject</code></li>
<li><code>- (void)addBody:(NSString *)body</code></li>
<li><code>- (void)addBody:(NSString *)body withLanguage:(NSString *)language</code></li>
<li><code>- (void)addThread:(NSString *)thread</code></li>
</ul>
</li>
<li><p>类型判断</p>
</li>
</ol>
<p>​</p>
<h2 id="XMPPPresence"><a href="#XMPPPresence" class="headerlink" title="XMPPPresence"></a>XMPPPresence</h2><p>presence用来表明<strong>用户的状态</strong>，如：online、away、dnd(请勿打扰)等。要想接受presence消息，必须经过一个叫做presence subscription的授权过程。 </p>
<h3 id="属性：type"><a href="#属性：type" class="headerlink" title="属性：type"></a>属性：type</h3><ul>
<li>subscribe：订阅其他用户的状态</li>
<li>probe：请求获取其他用户的状态</li>
<li>unavailable：不可用，离线（offline）状态</li>
</ul>
<h3 id="内容："><a href="#内容：" class="headerlink" title="内容："></a>内容：</h3><ol>
<li><p>show：</p>
<ol>
<li>chat：聊天中</li>
<li>away：暂时离开</li>
<li>xa：extend Away，长时间离开</li>
<li>dnd：勿打扰</li>
</ol>
</li>
<li><p>status：</p>
<p> 格式自由，可阅读的文本。也叫做rich presence或者extended presence，常用来表示用户当前心情，活动，听的歌曲，看的视频，所在的聊天室，访问的网页，玩的游戏等。</p>
</li>
<li><p>priority：</p>
<p> 范围-128~127。高优先级的resource能接受发送到bare JID的消息，低优先级的resource不能。优先级为负数的resource不能收到发送到bare JID的消息。</p>
</li>
</ol>
<h2 id="XMPPIQ"><a href="#XMPPIQ" class="headerlink" title="XMPPIQ"></a>XMPPIQ</h2><p>一种<strong>请求／响应机制</strong>，从一个实体发送请求，另外一个实体接受请求，并进行响应。例如，client在stream的上下文中插入一个元素，向Server请求得到自己的好友列表，Server返回一个，里面是请求的结果。 </p>
<h3 id="属性：type-1"><a href="#属性：type-1" class="headerlink" title="属性：type"></a>属性：type</h3><ul>
<li>Get :获取当前域值。类似于http get方法。</li>
</ul>
<ul>
<li>Set :设置或替换get查询的值。类似于http post方法。</li>
</ul>
<ul>
<li>Result :说明成功的响应了先前的查询。类似于http状态码200。</li>
<li>Error: 查询和响应中出现的错误。</li>
</ul>
<h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><ol>
<li><p><code>- (NSXMLElement *)childElement</code></p>
<p> 获取单个非错误信息的元素</p>
</li>
<li><p><code>- (NSXMLElement *)childErrorElement</code></p>
<p> 获取错误信息的元素</p>
</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《<a href="http://blog.csdn.net/wbw1985/article/details/5502272" target="_blank" rel="external">XMPP协议的原理介绍</a>》</p>
<p>《<a href="http://www.cnphp6.com/archives/25578" target="_blank" rel="external">XMPP JID 和通信原语有3种：MESSAGE、PRESENCE和IQ</a>》</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多重委托(MultiDelegate)官方解释]]></title>
      <url>http://yoursite.com/2016/05/18/%E5%A4%9A%E9%87%8D%E5%A7%94%E6%89%98-MultiDelegate-%E5%AE%98%E6%96%B9%E8%A7%A3%E9%87%8A/</url>
      <content type="html"><![CDATA[<h1 id="多重委托"><a href="#多重委托" class="headerlink" title="多重委托"></a>多重委托</h1><hr>
<ul>
<li>什么是多重委托</li>
<li>使用的原因</li>
<li>为什么不使用普通的委托与通知</li>
</ul>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><hr>
<p>苹果有两种常用的回调方式：</p>
<ul>
<li>委托</li>
<li>通知<br>委托非常简单和直接，用户注册自己为一个委托，然后实现它需要去实现的方法。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[worker setDelegate:<span class="keyword">self</span>];</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)wokerDidFinish:(Worker *)sender</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)woker:(Worker *)sender didFinishSubTask:(<span class="keyword">id</span>)subtask inDuration:(NsTimeInterval)elapsed</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">BOOL</span>)worker:(Worker *)sender shouldPerformSubTask:(<span class="keyword">id</span>)subtask</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通知同样简单，但是需要多了几步，用户需要分别注册它们感兴趣的每个通知：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></span><br><span class="line">selector:<span class="keyword">@selector</span>(workerDidFinish:)</span><br><span class="line">name:WorkerDidFinishNotification</span><br><span class="line">object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></span><br><span class="line">selector:<span class="keyword">@selector</span>(workerDidFinishSubTask:)</span><br><span class="line">name:WorkerDidFinishSubTaskNotification</span><br><span class="line">object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)workerDidFinish:(<span class="built_in">NSNotification</span> *)notification</span><br><span class="line">&#123;</span><br><span class="line">Worker *sender = [notification object];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)workerDidFinishSubTask:(<span class="built_in">NSNotification</span> *)notification</span><br><span class="line">&#123;</span><br><span class="line">Worker *sender = [notification object];</span><br><span class="line"><span class="keyword">id</span> subtask = [[notification userInfo] objectForKey:<span class="string">@"subtask"</span>];</span><br><span class="line"><span class="built_in">NSTimeInterval</span> elapsed = [[[notification userInfo] objectForKey<span class="string">"duration"</span>] doubleValue];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中我们要将参数从通知字典中取出，也就是说用户需要知道正确的键值才能取出对应的参数。<br>另外第三方委托方法不能通过通知来实现，因为<strong>通知不允许返回变量</strong>。<br>Delegate的缺点：</p>
<ul>
<li>只能有一个委托<br>notification的缺点：</li>
<li>注册多个回调时比较麻烦</li>
<li>从字典中取出参数非常麻烦</li>
<li>当需要返回值时无法使用<h2 id="XMPP框架需要哪些东西？"><a href="#XMPP框架需要哪些东西？" class="headerlink" title="XMPP框架需要哪些东西？"></a>XMPP框架需要哪些东西？</h2></li>
</ul>
<hr>
<ol>
<li>xmpp框架必须能够把事件广播给多个接收者。<br>以消息为例，可能存在多个接收端：聊天窗口，历史日志以及消息推送系统。</li>
<li>xmpp框架必须易于扩展。<br>它必须能够支持大量的EXP’s以及任何想进行二次开发的xmpp协议的开发者，我们选择的解决方案必须在传播端和接收端都易于使用。</li>
<li>必须支持返回值。<br>一个不错的例子是XMPP RFC的IQ处理授权。如果一个客户端接收到一个类型为’get’或’set’的IQ，但是不知道该怎么处理时，它必须返回一个类型为’error’的IQ，这在多插件时非常有用。</li>
<li>必须有效维持线程安全。<br>xmpp框架存在大量并行，Socket接口、xml解析、xmpp、模块、磁盘接口以及委托都能够运行在他们自己的GCD队列中，这在多核设备中意味着许多任务同时运行在不同的线程中，系统不应该通过跳出循环来维持线程安全。</li>
</ol>
<p>从这些看来委托和通知都不能很好的满足我们的要求，所以我们设计了<code>GCDMulticastDelegate</code>类。</p>
<h2 id="如何运作"><a href="#如何运作" class="headerlink" title="如何运作"></a>如何运作</h2><hr>
<p>它非常简单，作为客户端，你只要这样：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Add myself as a delegate, and tell xmppStream to invoke my delegate methods on the main thread</span></span><br><span class="line">[xmppStream addDelegate:<span class="keyword">self</span> delegateQueue:dispatch_get_main_queue()];</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Then just implement whatever delegate methods you need like normal</span></span><br><span class="line">-(<span class="keyword">void</span>)smppStream:(XMPPStream *)sender didReciveMessage:(XMPPMessage *)message</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>就是这些，你可以看到，它和普通的委托非常相似，但是允许你指定特定线程。<br>如果之后你决定把你的操作移出主线程的话，同样非常简单：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Handle most stuff on the main thread</span></span><br><span class="line">[xmppStream addDelegate:<span class="keyword">self</span> delegateQueue:dispatch_get_main_queue()];</span><br><span class="line"><span class="comment">//But do that one slow thing on a background queue so it doesn't slow down the UI anymore</span></span><br><span class="line">[xmppSream addDelegate:bgProcessor delegateQueue:bgProcessorQueue];</span><br></pre></td></tr></table></figure>
<p>在IPhone这样的设备环境下，这样做可以很好的维持你应用的性能。</p>
<h2 id="如何在自己的插件中使用"><a href="#如何在自己的插件中使用" class="headerlink" title="如何在自己的插件中使用"></a>如何在自己的插件中使用</h2><hr>
<p>为了使用多重委托，作为广播端，你需要申明并初始化它：<br>GCDMulticastDelegate <myplugindelegate> <em>multicastDelegate;<br>multicastDelegate = (GCDMulticastDelegate <myplugindelegate> </myplugindelegate></em>)[[GCDMulticastDelegate alloc] init];<br>然后添加能够允许其他对象从委托列表中添加/删除委托的方法：</myplugindelegate></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)addDelegate:(<span class="keyword">id</span>)delegate delegateQueue:(<span class="built_in">dispatch_queue_t</span>)delegateQueue</span><br><span class="line">&#123;</span><br><span class="line">[multicastDelegate addDelegate:delegate delegateQueue:delegateQueue];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)removeDelegate:(<span class="keyword">id</span>)delegate delegateQueue:(<span class="built_in">dispatch_queue_t</span>)delegateQueue</span><br><span class="line">&#123;</span><br><span class="line">[multicastDelegate removeDelegate:delelgate delegateQueue:delegateQueue];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当你要触发某个委托方法时，只要是注册了的委托，你可以：<br>[multicastDelegate worker:self didFinishSubTask:subtask inDyration:elapsed];</p>
<h2 id="关于返回变量"><a href="#关于返回变量" class="headerlink" title="关于返回变量"></a>关于返回变量</h2><hr>
<p>对于下面的这个委托方法：<br>-(BOOL)worker:(Worker *)sender shouldPerformSubTask:(id)subtask;</p>
<p>假如返回了三个委托，两个返回YES另一个返回NO，那如何处理它？<br>一般来说，如果任何一个委托返回NO，那我们就不能执行这个任务。<br>那么如何实现它？</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Delegate rules:</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// If ANY of the delegates return NO, then the result is NO.</span></span><br><span class="line"><span class="comment">// Otherwise the result is YES.</span></span><br><span class="line"></span><br><span class="line">SEL selector = <span class="keyword">@selector</span>(worker:shouldPerformSubTask:);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSUInteger</span> delegateCount = [multicastDelegate countForSelector:selector];</span><br><span class="line"><span class="keyword">if</span> (delegateCount == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// No delegates implement the selector - default is YES</span></span><br><span class="line">[<span class="keyword">self</span> continuePerformSubTask:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Query the delegate(s)</span></span><br><span class="line">GCDMulticastDelegateEnumerator *delegateEnumerator = [multicastDelegate delegateEnumerator];</span><br><span class="line"></span><br><span class="line">dispatch_semaphore_t delSemaphore = dispatch_semaphore_create(<span class="number">0</span>);</span><br><span class="line">dispatch_group_t delGroup = dispatch_group_create();</span><br><span class="line"></span><br><span class="line"><span class="keyword">id</span> del;</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> dq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ([delegateEnumerator getNextDelegate:&amp;del delegateQueue:&amp;dq forSelector:selector])</span><br><span class="line">&#123;</span><br><span class="line">dispatch_group_async(delGroup, dq, ^&#123; <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (![del worker:<span class="keyword">self</span> shouldPerformSubTask:subtask])</span><br><span class="line">&#123;</span><br><span class="line">dispatch_semaphore_signal(delSemaphore);</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">dispatch_async</span>(concurrentQueue, ^&#123; <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for the delegates to finish</span></span><br><span class="line">dispatch_group_wait(delGroup, DISPATCH_TIME_FOREVER);</span><br><span class="line"></span><br><span class="line"><span class="comment">// What was the delegate response?</span></span><br><span class="line"><span class="built_in">BOOL</span> shouldPerformSubTask = (dispatch_semaphore_wait(delSemaphore, DISPATCH_TIME_NOW) != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_async</span>(ourQueue, ^&#123; <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">[<span class="keyword">self</span> continuePerformSubTask:shouldPerformSubTask];</span><br><span class="line">&#125;&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_release(delSemaphore);</span><br><span class="line">dispatch_release(delGroup);</span><br><span class="line">&#125;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/05/18/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
